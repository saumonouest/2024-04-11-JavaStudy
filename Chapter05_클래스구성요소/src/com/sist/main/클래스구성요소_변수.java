package com.sist.main;
/*	클래스 구성요소
 * 	-----------
 * 	*** 클래스 블록
 * 	class ClassName
 * 	{
 * 		=> 구현이 불가능
 * 		   ---
 * 			제어문 / 연산처리 / 파일 읽기 / 크롤링 / 메소드 호출 . . . => 메소드 처리, 생성자, 초기화 블록을 이용
 * 
 * 		=> 선언만 가능
 * 			1. 변수 : 한 개만 저장이 가능
 * 			--------------------------
 * 			2. 클래스 (사용자 정의 데이터형)
 * 			3. 배열 
 * 			-------------------------- 여러개를 저장할 수 있다
 * 			---------------------------- 변수형
 * 			
 * 	------------------------------------------------------------------------------------------------------
 * 	변수 : 프로그램에 필요한 데이터를 저장공간 => 프로그램 종료시까지 유지하는 변수 => 멤버변수 => 자동 초기화(default)
 * 	------------------------------------------------------------------------------------------------------
 * 	변수 => 초기화 (변수는 초기값이 없는 상태에서는 메모리에 저장이 안 됨)
 * 	생성자
 * 		=> 특징 (일반 메소드와 다름)
 * 			1) 클래스명과 동일
 * 
 * 			2) 리턴형이 없다 => void(리턴형)
 * 
 * 				e.g.)
 * 				class A { 
 * 					void A(){} => 일반 메소드
 * 					A(){}	   => 생성자
 * 
 * 			3) 여러개의 생성자를 만들 수 있다
 * 			   ----------- 같은 이름의 메소드를 여러개 제작이 가능 (오버로딩)
 * 				= 오버로딩 : 같은 이름의 메소드로 새로운 기능을 추가
 * 				1. 메소드명이 동일
 * 				2. 매개변수의 갯수나 데이터형이 다름
 * 				3. 리턴형은 관계가 없음
 * 				4. 접근지정어는 관련이 없다
 * 				e.g.) 
 * 					plusInt(int a, int b)				=>  plus(int,int)
 * 					plusDouble(double d, double d2)		=>  plus(double,double)
 * 					plusIntDouble(int a, double d)
 * 					plusByteInt(byte b, int i)
 * 					plusChar(char a, char b)
 * 			
 * 			4) 생성자의 역할 => 역할이 필요없는 경우도 있기 때문에 생략이 가능
 * 				** 반드시 생성자는 필요하다
 * 				** 생략이 된 경우에는 생성자를 추가 (컴파일러)
 * 				1. 멤버변수의 초기화 담다
 * 				2. 클래스를 메모리에 저장할 때 호출되는 메소드
 * 				-----------------------------------
 * 				3. 시작과 동시에 처리해야하는 기능이 있는 경우
 * 				   -------------
 * 					=> 화면 UI, 오라클 연결, 서버 연결, 웹 => 자동 로그인
 * 
 * 			5) 생성자 호출
 * 			 	=> new 생성자 ()
 *				   --- new가 없이 호출하면 오류 발생
 * 
 * 
 * 
 * 
 * 	초기화 블록 : 호출없이 자동으로 처리
 * 	인스턴스 변수
 * 		{
 * 			구현 후 초기화
 * 		}
 * 	정적 변수
 * 	static
 * 		{
 * 			static 변수의 초기화
 * 		}
 * 	
 * 	** 초기화 방법
 * 	명시적인 초기화
 * 		int a=100; => 초기화는 명시적인 초기화 => 명시적 초기화
 * 
 * 	초기화 블록
 * 		int a;
 * 		{
 * 		 a=100;    => 파일 읽기, 웹 => 구현이 필요한 부분
 * 		}
 * 
 * 	생성자
 * 		int a;
 * 		생성자()
 * 		{
 * 			a=100; => 파일 읽기, 웹 => 구현이 필요한 부분
 * 		}
 * 
 * 		class A
 * 		{		
 * 			int a=10, b=20, c=30 => 0 값 초기화 => 10 20 30 
 * 			=> random() => 초기화 블록, 생성자
 * 						   ---------------
 * 							반드시 필요한 부분이 아니다 => 생성자 생략
 * 		}
 * 
 * 		==> 저장되는 순서
 * 		기본값 ==> 명시적인 초기값 ==> 초기화 블록 ==> 생성자
 * 				 ---------------------------------- 동시에 사용하지 않는다
 * 
 * 		예)
 *  		class ClassName
 *  		{ 
 *  			int a=100; 		=> 고려
 *  			=> 중복이 없는 난수값을 저장 => 명시적인 초기화가 불가능 (구현)
 *  			{
 *  			 	a=200;
 *  			}
 *  		
 *  			ClassName()
 *  			{
 *  				a=300;
 *  			}
 *  		}
 *  
 *  
 *  		class ClassName
 *  		{
 *  			int a=300;
 *  		}
 *  
 *  		  a  	  a  	  a  	  a
 *  		-----	-----	-----	-----
 *  		  0  	 100 	 200 	 300  => 프로그램 시작(a=300)
 *  		-----	-----	-----	-----
 *  
 *  		클래스에서는 선언 / 선언과 동시에 초기화
 *  		int a;
 *  		int a=100;
 *  		
 *  		=> int a;
 *  		   a=100; ==> {}
 *  
 * 	------------------------------------------------------------------------------------------------------
 * 	메소드 : 특정 기능을 수행하는 명령문의 집합
 * 		   -------
 * 			검색, 목록, 페이지 나누기, 예약, 결제, 회원 가입, 회원 탈퇴
 * 			1. 재사용
 * 			2. 기능별로 나눠져 있음 => 수정
 * 			3. 반복 기능 제거 가능
 * 			4. 구조적인 프로그램 (2번 동일)
 * 			5. 역할 : 기능 수행, 다른 클래스와 연결
 * 							  -------------
 * 			=> 객체 지향 프로그램
 * 				여러개 클래스를 모아서 조립하는 프로그램 => 다른 클래스와 연동
 * 	기능 
 * 		CPU / 하드디스크 / 모니터 / 메모리 ==> 기능을 구현
 * 		----------------------------
 * 					|
 * 				  메인보드
 * 		=> 클래스 1개 부품 => 조립(CBD)
 * 							Component : 클래스 (한 개 기능 => 게시판)
 * 							=> 여러개 만든다 => 조립
 * 							=> 레고
 * 							=> 묶어주는 역할 Container 
 * 
 * 	= 메소드 형식
 * 		[접근지정어][옵션] 리턴형 메소드명(매개변수목록) => 선언부 
 * 		{
 * 			구현
 * 			return 값 => 데이터형에 해당되는 값
 * 			//void (결과값이 없는 경우) => return 생략 가능
 * 									  -------------- 자동으로 추가(컴파일러)
 * 		}
 * 		** 접근지정어
 * 		private : 자신의 클래스 안에서만 사용 => 다른 클래스와 연결할 수 없다 => 멤버 변수(데이터보호)
 * 		default : 키워드가 없는 상태 => 같은 패키지 안에서만 접근이 가능
 * 		protected : 같은 패키지 안에서만 접근이 가능 + 상속을 받은 경우에는 다른 패키지 접근이 가능
 * 		public : Open 모드 => 패키지와 관계없이 모든 클래스에서 접근이 가능
 * 		*** private : 접근 거부 => 다른 클래스에서 사용이 안 됨 => 개인정보 => 멤버 변수
 * 				=> 메소드 (변수의 기능)
 * 						 ---------
 * 						 메모리 저장 / 메모리 값 읽기
 * 						 --------	-----------
 * 						 setter   /  getter 
 * 						 public set 변수명() / public get 변수명()
 * 						 => 변수는 메모리에 값이 저장 => 노출 (변경, 상실 방지)
 * 						 => 메소드는 주소 값만 저장 => 노출이 없다
 * 						 -------------------------------------------------- 캡슐화
 * 
 * 		*** public : 접근이 가능 => 다른 클래스와 연결 가능 => 생성자 / 클래스 / 메소드 / 인터페이스
 * 
 * 		-----------------------------------------------------------------------------
 * 
 * 		접근 지정어 사용 방법
 * 		----------------
 * 		클래스
 * 		[접근지정어][옵션] class ClassName
 * 		--------- public => 다른 클래스와 연결
 * 					옵션 => static / abstract / final
 * 		{
 * 			
 * 		}
 * 		
 * 		생성자 : 다른 클래스와 연결
 * 		[접근지정어] 클래스명()
 * 		--------- public 
 * 		{
 * 			=> 구현
 * 		}
 * 
 * 		멤버변수 : 
 * 		[접근지정어][옵션] 데이터형 변수명 => 클래스, 배열
 * 		--------- ---
 * 				  static : 공통으로 사용하는 변수 => 메모리 공간 1개만 만든다
 * 		=> private : 개인정보, 회사정보 => 노출하면 안 되는 정보
 * 		=> public  : 라이브러리 클래스, 버튼, 테이블 => 연결
 * 					 윈도우와 관련
 * 		** 일반 => 인스턴스
 * 		** 데이터 묶음 => static => 데이터 관리
 * 			회원목록 / 게시판 목록 => 한 개만 가지고 사용
 * 
 *  	-------------------------------------------------------------------------------
 * 		메소드 : 다른 클래스와 연결 	   --------- 0 이상 => 매개변수 3개 이상 추가하지 않는다
 * 		[접근지정어][옵션] 리턴형 메소드명(매개변수 목록)				------- 배열/클래스
 * 		--------- ---  ---- 기본형, 배열, 클래스
 * 		  public  static or abstract
 * 				  ------
 * 				  ㄴ공통으로 사용(한글 변환, 암호화, 복호화)
 * 		{
 * 			구현
 * 		}
 * 		
 * 		경우의 수
 * 		------------------------------------
 * 			리턴형 			매개변수
 * 			요청처리값 		사용자요청값
 * 		------------------------------------
 * 			  o					o		=> String
 * 										   String substring(int s, int e)
 * 										   s부터 e까지 자른 문자열을 달라는 뜻
 * 		------------------------------------
 * 			  o					x		=> String trim() => 공백을 제거한 문자열
 * 										=> String toUpperCase() => 대문자로 변환 후에 문자열
 * 		------------------------------------
 * 			  x					o		=> void System.out.println(String s)
 * 										   s를 출력하라
 * 										   => 메소드 자체 처리 => 결과값이 없다 void
 * 										   => 오라클에 추가, 수정, 삭제
 * 		------------------------------------
 * 			  x					x		=> 사용빈도가 거의 없다
 * 										   void System.out.println() => 다음줄에 출력
 * 		------------------------------------
 * 		** 옵션 
 * 	= 메소드 호출
 * 		class A
 * 		{	
 * 			private int a;
 * 			private int b;
 * 			private static int c; => 저장
 * 			public void aaa(){}
 * 			public static void bbb(){} => 저장
 * 			public int ccc(){}
 * 			public static int ddd(){} => 저장
 * 						  --- int / long / double로 받을 수 있음  => 권장 : 같은 데이터형으로 받기
 * 			static => 메소드 / 변수 는 컴파일 시에 저장
 * 		}
 * 		
 * 		  static 저장 => Method Area
 * 		------------
 * 		 ----------
 * 			 0 ---> c		===> A.c ===> 클래스명.변수
 * 		 ----------
 * 			bbb()			===> A.bbb() ===> 클래스명.메소드명()
 * 		 ----------
 * 			ddd()			===> 결과값을 받는다
 * 		 ----------				 int result=A.ddd()
 * 		------------			 ---		------- 리턴형이 없는 경우에는 결과값을 받아서 저장
 * 			A aa=new A();		 ㄴ리턴에 사용된 데이터형보다 크거나 같다
 * 
 * 
 * 		메소드 수행
 * 		--------
 * 		public int aaa()
 * 		{
 * 			1. 문장
 * 			2. 문장
 * 			3. 문장
 * 			return 10;
 * 		}
 * 	
 * 		int a=aaa() => 호출
 * 		1. 문장
 * 		2. 문장
 * 		3. 문장
 * 		===========> a에 10을 대입한다 ==== 밑에 문장 수행
 * 		호출 => 메소드에 있는 모든 문장을 수행 ==> 호출된 위치 복귀
 * 		-----------------------------------------------
 * 		* 메소드는 호출시마다 => 메소드 처음부터 다시 수행  
 * 
 * 	------------------------------------------------------------------------------------------------------
 * 	=> 패키지 / 임포트 처리
 * 	=> 데이터 보호 : 캡술화
 * 	=> 상속 / 포함 
 * 	=> 오버라이딩 / 오버로딩	
 * 	--------------------- 객체 지향 프로그램
 * 	예외처리 / 클래스 종류 / 라이브러리 사용 / 구현
 * 
 * 	*** 개념
 * 		=> 1. 형식 / 2. 사용방식 / 3. 조립 => 기능
 * 					--------- 메소드 호출 / 초기화
 * 		   ----------------------------------- 요구사항분석 => 구글링 / GPT
 * 	개념 => 자바 / Spring 
 * 		   --- 객체지향 프로그램 / 자료구조 
 * 
 * 	*** 프로그램의 구현(마음)
 * 	*** 프로그램 => 분석, 수정 . . . 
 * 
 * 	*** 프로그램에서는 특별한 경우가 아니면 static 메소드는 사용빈도가 거의 없다
 * 								   ------------ 데이터베이스 / 네트워크 프로그램을 제어
 * 									ㄴ 인스턴스 메소드(웹)
 * 
 * 
 */
public class 클래스구성요소_변수 {
	/*	저장이 안된 => 인스턴스 (new를 이용해서 저장한다)
	 * 
	 *	인스턴스 : 객체
	 *	------ 클래스의 내용(메소드, 변수) => 메모리에 저장한 상태 => 각자 따로 저장 => new를 이용해야 사용이 가능
	 *
	 *	인스턴스 : 변수 / 메소드(*** 필수)
	 *	static : 변수 / 메소드 
	 *
	 *	class A
	 *	{
	 *		private int a=10;				=> 객체 자신이 가지고 있는 변수
	 *		private static int b=20;		=> 객체마다 공통으로 사용되는 변수
	 *
	 *		public void aaa()				=> 객체 자신이 가지고 있는 메소드
	 *		{
	 *			=> ccc() / a / b => 사용이 가능
	 *		}
	 *
	 *		static public void bbb()		=> 객체마다 공통으로 사용되는 메소드
	 *		{
	 *			=> b만 사용이 가능 => static에서는 static으로 선언된 변수, 메소드만 가능
	 *			=> aaa(), bbb(), a 사용을 하고 싶다면~
	 *			A aa=mew A(); => 객체 선언 후 사용이 가능하다~
	 *			aa.aaa()
	 *			aa.bbb()
	 *			aa.a
	 *		}
	 *
	 *		public void ccc()				=> 객체 자신이 가지고 있는 메소드
	 *		{
	 *			=> aaa() / a / b
	 *		}
	 *		인스턴스 메소드는 클래스에 있는 모든 데이터 / 메소드 사용이 가능
	 *
	 *	}
	 *
	 *		메소드는 호출이 되면 => return이 있는 곳까지 수행
	 */
	public void aaa() {
		System.out.println("aaa() 진입 . . ."); // 1
		bbb(); // 이동 
		System.out.println("aaa() 종료 . . ."); // 6
		return;
	}
	public void bbb() {
		System.out.println("bbb() 진입 . . ."); // 2
		ccc(); // 이동
		System.out.println("bbb() 종료 . . ."); // 5
		// return을 생략 => 자동 추가
	}
	public void ccc() {
		System.out.println("ccc() 진입 . . ."); // 3
		System.out.println("ccc() 종료 . . ."); // 4
		//return => void 일 때만 생략 가능
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 객체 생성 후 메소드를 사용할 수 있다
		클래스구성요소_변수 aa=new 클래스구성요소_변수();
		aa.aaa();
	}

}
