package com.sist.main;
/* 1. 인터페이스
 * 		=> 추상 클래스의 일종 => 특수한 클래스 => 상속 시에 상위 클래스 역할 
 * 		   -------------
 * 		   ㄴ 미완성된 클래스 => 상속 내려서 구현
 * 			 -----------
 * 			 ㄴ 자신이 메모리 할당을 할 수 없다
 * 		   => 추상 클래스의 단점을 보완
 * 			  ------------- 단일 상속 => 다중 상속으로 변경
 * 			  ------------- 추상 클래스는 구현된 메소드 / 구현이 안 된 메소드 => 인터페이스는 구현이 안 된 메소드만 갖고 있음
 * 		   => 역할
 * 				1) 서로 다른 클래스를 연결해서 사용
 * 				2) 관련 클래스를 묶어서 한 개의 객체명으로 제어
 * 				3) 설계와 관련되어 있음 => 재사용이 가능(기능 설계)
 * 				4) ------------------------------------ 모든 개발자가 동일한 메소드를 재정의 : 표준화 
 * 					표준화 : 라이브러리 
 * 						   System.out.println()
 * 						   Math.random()
 * 						   nextInt()
 * 					---- 소스의 통일화 => 분석이 쉽다 : 유지보수가 쉽게 만들기 때문에
 * 						 --------- 스프링
 * 		   => 요구사항 분석 => 인터페이스
 * 		   => 아이템 선정 => 참조할 사이트 (벤치마킹) => 기능 추출 / 데이터 추출
 * 											   ㄴ인터페이스  ㄴ크롤링(사용자 정의 데이터형)
 * 		   => 사이트에 사용할 데이터 크롤링 => 오라클에 저장
 * 			  데이터 베이스 설계 => 데이터 수집
 * 		   => 구현 => JSP / Spring 
 * 		   => 테스트 => 오류 발생 여부 확인
 * 		   => 배포
 * 
 * 2. 인터페이스의 구성요소
 *		[접근지정어] interface interface명
 *		 |		  ---------
 *		 | default / public => 다른 클래스를 묶어서 관리 => public
 *		{ --------------------------------
 *			변수 : => 상수
 *			int a; => 오류 발생
 *			int a=10; => 초기화를 반드시 한다
 *			=> 생략
 *				(public static final) in a=10;
 *				-------------------- 자동추가
 *		  --------------------------------
 *			구현이 안 된 메소드
 *			=> void aaa();
 *			=> void bbb();
 *			=> 생략
 *				(public abstract) void aaa();
 *				---------------- 자동추가 
 *		  --------------------------------
 *			JDK 1.8
 *			구현된 메소드
 *			=> dafault void ccc() {
 *				}
 *		  --------------------------------
 *			*** 인터페이스는 상수 / 메소드 => public 
 *			*** 단점
 *				=> 관련된 클래스를 모아서 관리
 *				=> 결합성이 낮은 프로그램
 *				   ---------------- 클라스와 클래스 연결 => 수정할 때 에러 부분
 *		  --------------------------------
 *
 * 3. 인터페이스의 장점
 * 		=> 기능 설계 => 메소드 설계 => 개발기간을 단축할 수 있다
 * 		=> 메소드가 동일하다 (모든 개발자 동일한 메소드 구현) => 표준화 (분석하기 쉽다)
 * 		=> 인터페이스 한 개로 여러개의 클래스를 관리
 * 		=> 유지보수가 쉽다
 * 		=> 독립적으로 사용이 가능 (클래스 == 클래스)
 * 								  | 리모콘의 역할 수행 (원격)
 * 		=> 면접
 * 		=> 클래스가 여러개 (관련) => 게시판, 갤러리 게시판, 댓글 => 사이트(게시판)
 * 							   -------------------- CURD
 * 		=> 결합성이 낮은 프로그램
 * 		=> 표준화 작업
 * 
 * 4. 인터페이스 상속
 * 		=> 인터페이스와 인터페이스 상속
 * 			interface A
 * 			interface B extends A
 * 
 * 			interface A
 * 			interface B extends A
 * 			interface C extends B
 * 			--------------------- 단일 상속
 * 
 * 			interface A
 *			interface B
 *			interface C extends A,B
 *			------------------------ 다중 상속
 *
 * 		=> 인터페이스와 클래스 상속
 * 			interface A
 * 			class B implements A 
 * 					---------- A가 가지고 있는 메소드를 구현해서 사용한다
 * 		
 * 		=> 다중 상속
 * 			interface A
 * 			interface B
 * 			class C implements A,B
 * 
 * 			interface A
 * 			interface B
 * 
 * 
 * 5. 인터페이스 활용
 * --------------------------------> 객체 지향의 마지막
 * => 예외처리 (형식)
 * => 라이브러리 (암기) => 메소드 => 기능, 원형(리턴형/매개변수)
 * 	  ------------ 컬렉션(배열 대신) => 웹
 * 					ㄴ고정이 아님 => 갯수 지정 X => 제네릭스 (자동 형변환)
 * => 웹(데이터베이스 연동)
 * 		------------ 브라우저 => 데이터형 클래스
 * => 틀을 만든다 : 스프링 (메인보드) => 실무
 * 				------------- 스프링부트(단점 => 교재)
 * => AWS에 호스팅 => 리눅스 명령어 약간
 * 
 * *웹 프로그램 
 * 	자바 : 변수(데이터형), 연산자, 제어문
 * 		  = 묶어서 사용
 * 			--------
 * 			1) 명령문 묶기 => 메소드
 * 			2) 변수 묶기 => 배열(1차원), 클래스
 * 
 * 		  = 객체지향 프로그램 : 권장사항
 * 			1) 데이터 보호 : 캡슐화 => getter / setter => 웹 사이트 보고 출력되어있는 데이터 추출 자주 하기
 * 						  => 크롤링
 * 			2) 인터페이스 : 클래스 여러개를 묶어서 관리 => 결합성이 낮은 프로그램
 * 			3) 오버라이딩 => 인터페이스는 오버라이딩을 주로 사용
 * 
 * 		  = 프로그램 비정상 종료 방지 : 예외처리
 * 		  = 사용자 정의 + 라이브러리 => 조립
 * 			--------------------------- 사용자
 * 		  = 2차 자바 : 오라클 연동 => JDBC
 * 		  = 3차 자바 : 웹 연동 => J2EE (JSP)
 * 							  ---------- JSP가 사라지는 느낌 : 타임리프, VusJS
 * 		  = 4차 자바 : 스프링, 스프링부트 : 어노테이션 / XML
 * 		  = 서버단
 * 			개인 프로젝트 
 * 			스프링부트 => React=Query
 * 			-----------------------
 * 			장고     => Redux
 * 			--- 파이썬 => 예측, 통계 
 * 
 * 
 *	선언시 => 접근지정어는 public만 선언이 가능
 *	인터페이스는 접근지정어는 public만 사용이 가능
 * 
 */

public class 인터페이스_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
