/*
 * 여러 줄 주석
 * 2page
 * 	자바언어의 특징
 * 		1) 프로그램 언어 실행하는 방식
 * 			= 컴파일 방식 = 컴퓨터가 인식하는 언어로 변경(2진파일로 되어 있다~ -> 0,1)
 * 			= 인터프리터 방식 = 한줄씩 번역해서 처리 (보통 HTML, CSS)
 * 			*자바는 위의 두 방식 동시에 사용 => 보안이 뛰어남(소스 검증)
 * 		
 * 			자바소스	 -		JVM 	- 	운영체제 
 * 			 |				 | 			  |
 * 		   (.java)		  class번역 	 동일한 실행 결과
 * 
 * 
 *  6page
 *   개발환경 구축
 *   1) *JDK => jdk.java.net/14
 *   	*Spring-Boot : 17이상
 *   	*SPringFramework : 14이하 *****
 *   	*오픈소스를 이용 => 호환성 => 단점
 *   
 *   2)환경설정
 *   =>classpath : 라이브러리 읽기 => .;c:\jdk-17.0.2\lib
 *   =>path 	 : 실행파일 등록 => c:\jdk-17.0.2\bin
 *   
 *   3) 11page 편집기
 *   		eclipse => 백엔드 위주 > eclipse.org => 최신 다운
 *   		인텔리J 	 => 풀스텍 => 
 *   	=프로젝트 폴더 만들기
 *   	=src에 자바 클래스 생성
 *   --------------------------------------------------------------------------
 *   	주의점) 
 *   			1. 파일명과 클래스명이 동일
 *   			2. 대소문자를 구분
 *   			3. 명령문 종료시 세미콜론 (;)
 *   			4. 클래스명 한글 사용 가능 -> 다른 운영체제 사용 시 인식 불가(영문 권장)
 *   --------------------------------------------------------------------------
 *   	지킬 사항) 
 *   			1. 클래스명 : 대문자 시작 (e.g. MainClass)
 *   			2. 변수 : 소문자 시작 (e.g. id, password)
 *   			3. 상수 : 모든 단어 대문자 (e.g. ID, PASSWORD)
 *   			4. 메소드 : 소문자 시작 
 *   ----------------------------------------------------------------------------
 *   	* 모든 자바 파일 실행 시 반드시 main() ---------- 실행 시작점 / 종료점
 *   	* 주석 : ctrl + shift + / 
 *   			ctrl + shift + \
 *   	* 자바의 구성 요소
 *   			1. class className
 *   			  {
 *   				public static void main(String[] arg) => 프로그램 시작점
 *   			   {
 *   
 *   			   }
 *   			  }
 *   
 *   객체 지향 프로그램 (5장)
 *   ----------class-----------
 *   --------------------------
 *   => 변수
 *   --------------------------
 *   => 생성자
 *   --------------------------
 *   => 메소드
 *   --------------------------
 *   --------------------------
 *   
 *   
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println('A');
		System.out.println((int)'A');
		System.out.println(Integer.toBinaryString(65));
	}

}
